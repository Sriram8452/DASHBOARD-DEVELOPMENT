# -*- coding: utf-8 -*-
"""Sriram Gopalan G-CODTECH Task 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bGp_IktzoZQh4LwzWw6jL5cPgsWOiCqg
"""

# Name:SRIRAM GOPALAN G
# TASK 3: DASHBOARD DEVELOPMENT

# Task 3: Dashboard for Heart Disease Data

pip install dash pandas plotly

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

file_path = "heart.csv"
data = pd.read_csv(file_path)

app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("Heart Disease Dashboard", style={'text-align': 'center'}),
    html.Div([
        html.Label("Select Feature for Distribution:"),
        dcc.Dropdown(
            id='feature-dropdown',
            options=[{'label': col, 'value': col} for col in data.columns if col != "target"],
            value='age'
        )
    ]),
    dcc.Graph(id='histogram'),
    html.Div([
        dcc.Graph(
            id='pie-chart',
            figure=px.pie(
                data_frame=data,
                names='target',
                title='Heart Disease Distribution (0 = No, 1 = Yes)',
                hole=0.4
            )
        )
    ]),
    html.Div([
        html.Label("Select X and Y for Scatter Plot:"),
        dcc.Dropdown(
            id='x-axis-dropdown',
            options=[{'label': col, 'value': col} for col in data.columns if col != "target"],
            value='age'
        ),
        dcc.Dropdown(
            id='y-axis-dropdown',
            options=[{'label': col, 'value': col} for col in data.columns if col != "target"],
            value='chol'
        )
    ]),
    dcc.Graph(id='scatter-plot')
])

@app.callback(
    Output('histogram', 'figure'),
    [Input('feature-dropdown', 'value')]
)
def update_histogram(selected_feature):
    fig = px.histogram(data, x=selected_feature, title=f"Distribution of {selected_feature}")
    return fig


@app.callback(
    Output('scatter-plot', 'figure'),
    [Input('x-axis-dropdown', 'value'),
     Input('y-axis-dropdown', 'value')]
)
def update_scatter(x_feature, y_feature):
    fig = px.scatter(
        data,
        x=x_feature,
        y=y_feature,
        color='target',
        title=f"{x_feature} vs {y_feature} (Colored by Target)"
    )
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)